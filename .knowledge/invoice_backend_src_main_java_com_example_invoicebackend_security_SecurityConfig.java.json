{"is_source_file": true, "format": "Java", "description": "This Java class configures security settings for a Spring Boot application, primarily setting up JWT-based authentication, security filters, and CORS configuration.", "external_files": ["com/example/invoicebackend/security/jwt/JwtAuthenticationFilter", "com/example/invoicebackend/security/jwt/JwtTokenProvider", "com/example/invoicebackend/service/CustomUserDetailsService", "io/swagger/v3/oas/annotations/Tag", "org/springframework/beans/factory/annotation/Value", "org/springframework/context/annotation/Bean", "org/springframework/context/annotation/Configuration", "org/springframework/http/HttpMethod", "org/springframework/security/authentication/AuthenticationManager", "org/springframework/security/authentication/ProviderManager", "org/springframework/security/authentication/dao/DaoAuthenticationProvider", "org/springframework/security/config/annotation/method/EnableMethodSecurity", "org/springframework/security/config/annotation/web/builders/HttpSecurity", "org/springframework/security/config/http/SessionCreationPolicy", "org/springframework/security/core/userdetails/UserDetailsService", "org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder", "org/springframework/security/crypto/password/PasswordEncoder", "org/springframework/security/web/SecurityFilterChain", "org/springframework/security/web/authentication/UsernamePasswordAuthenticationFilter", "org/springframework/web/cors/CorsConfigurationSource"], "external_methods": ["org.springframework.security.web.SecurityFilterChain http.build()"], "published": ["com.example.invoicebackend.security.SecurityConfig"], "classes": [{"name": "SecurityConfig", "description": "Spring Security configuration class that sets up JWT authentication, CORS, session management, and authorization rules for the application."}], "methods": [{"name": "passwordEncoder", "description": "Defines a bean for password encoding using BCryptPasswordEncoder."}, {"name": "userDetailsService", "description": "Provides a custom UserDetailsService bean backed by CustomUserDetailsService."}, {"name": "authenticationManager", "description": "Creates an AuthenticationManager using DaoAuthenticationProvider with the specified UserDetailsService and PasswordEncoder."}, {"name": "securityFilterChain", "description": "Configures the HttpSecurity object to disable CSRF, enable CORS, set session as stateless, define URL access rules, and add the JWT filter."}], "calls": ["http.csrf(csrf -> csrf.disable())", "http.cors(cors -> cors.configurationSource(corsConfigurationSource))", "http.sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))", "http.authorizeHttpRequests(auth -> auth.requestMatchers(HttpMethod.OPTIONS, \"/**\").permitAll())", "http.authorizeHttpRequests(auth -> auth.requestMatchers(\"/api/auth/**\").permitAll())", "http.authorizeHttpRequests(auth -> auth.anyRequest().authenticated())", "http.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)"], "search-terms": ["Spring Security JWT configuration", "JwtAuthenticationFilter", "CustomUserDetailsService", "CORS setup", "SecurityFilterChain"], "state": 2, "file_id": 10, "knowledge_revision": 179, "git_revision": "0505be875c54d083c283b92b7567eb61ee768bc1", "revision_history": [{"25": ""}, {"56": ""}, {"173": "0ef0ff1154251927a773eb2426480ff608f6ad87"}, {"179": "0505be875c54d083c283b92b7567eb61ee768bc1"}], "hash": "f689b17eeaf0d2b19196a69d5f4177ab", "format-version": 4, "code-base-name": "invoice_backend", "filename": "invoice_backend/src/main/java/com/example/invoicebackend/security/SecurityConfig.java"}