{"is_source_file": true, "format": "Java", "description": "This Java class configures Spring Security for JWT authentication and role-based access control, defining beans for password encoding, user details service, authentication management, and HTTP security settings including URL authorization and JWT filter integration.", "external_files": ["com.example.invoicebackend.security.jwt.JwtAuthenticationFilter", "com.example.invoicebackend.security.jwt.JwtTokenProvider", "com.example.invoicebackend.service.CustomUserDetailsService"], "external_methods": ["org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder", "org.springframework.security.core.userdetails.UserDetailsService", "org.springframework.security.authentication.AuthenticationManager", "org.springframework.security.web.SecurityFilterChain", "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"], "published": ["PasswordEncoder", "UserDetailsService", "AuthenticationManager", "SecurityFilterChain"], "classes": [{"name": "SecurityConfig", "description": "Spring Security configuration class enabling method security and setting up JWT-based security policies."}], "methods": [{"name": "passwordEncoder", "description": "Creates and returns a PasswordEncoder bean using BCrypt for password hashing."}, {"name": "userDetailsService", "description": "Provides a UserDetailsService bean backed by CustomUserDetailsService for user authentication details."}, {"name": "authenticationManager", "description": "Creates an AuthenticationManager bean using DaoAuthenticationProvider configured with user details service and password encoder."}, {"name": "securityFilterChain", "description": "Configures HTTP security, enabling JWT filter, disabling CSRF, setting session management to stateless, and specifying URL access rules."}], "calls": ["new BCryptPasswordEncoder()", "new DaoAuthenticationProvider()", "provider.setUserDetailsService(userDetailsService)", "provider.setPasswordEncoder(passwordEncoder)", "new ProviderManager(provider)", "http.csrf(csrf -> csrf.disable())", "http.sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))", "http.authorizeHttpRequests(auth -> ... )", "http.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)"], "search-terms": ["JWT security configuration", "Spring Security setup", "HttpSecurity authorization", "JWT filter", "Security beans", "Stateless sessions", "RBAC API endpoints"], "state": 2, "file_id": 10, "knowledge_revision": 173, "git_revision": "0ef0ff1154251927a773eb2426480ff608f6ad87", "revision_history": [{"25": ""}, {"56": ""}, {"173": "0ef0ff1154251927a773eb2426480ff608f6ad87"}], "hash": "e4ef9e937f55344bd26b08aeaf75fe14", "format-version": 4, "code-base-name": "invoice_backend", "filename": "invoice_backend/src/main/java/com/example/invoicebackend/security/SecurityConfig.java"}