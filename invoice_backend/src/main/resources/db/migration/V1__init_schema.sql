-- Flyway Migration: V1__init_schema.sql
-- Creates core tables for Smart Invoice & Payment Reminder System
-- Note: Using VARCHAR for enum-like fields to ensure portability across H2 and Postgres.

-- SCHEMA NOTE:
-- In Postgres, schema selection is driven by application-prod.properties via DB_SCHEMA.
-- Do not hardcode schema here to remain H2-compatible.

-- Common type aliases (H2 compatible strings)
-- For monetary amounts we'll use NUMERIC(19,2)
-- For IDs we use BIGSERIAL-like generation at ORM level; here we define BIGINT and leave identity to JPA/DB as appropriate.

-- USERS
CREATE TABLE IF NOT EXISTS users (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email            VARCHAR(255) NOT NULL UNIQUE,
    password_hash    VARCHAR(255) NOT NULL,
    full_name        VARCHAR(255),
    status           VARCHAR(50) NOT NULL DEFAULT 'ACTIVE', -- e.g., ACTIVE, DISABLED
    last_login_at    TIMESTAMP,
    is_deleted       BOOLEAN NOT NULL DEFAULT FALSE,
    created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- ROLES
CREATE TABLE IF NOT EXISTS roles (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name             VARCHAR(100) NOT NULL UNIQUE, -- ADMIN, MANAGER, USER
    description      VARCHAR(255),
    created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- USER_ROLES (many-to-many)
CREATE TABLE IF NOT EXISTS user_roles (
    user_id          BIGINT NOT NULL,
    role_id          BIGINT NOT NULL,
    assigned_at      TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, role_id),
    CONSTRAINT fk_user_roles_user FOREIGN KEY (user_id) REFERENCES users (id),
    CONSTRAINT fk_user_roles_role FOREIGN KEY (role_id) REFERENCES roles (id)
);
CREATE INDEX IF NOT EXISTS idx_user_roles_user ON user_roles(user_id);
CREATE INDEX IF NOT EXISTS idx_user_roles_role ON user_roles(role_id);

-- PARTNERS (business profiles)
CREATE TABLE IF NOT EXISTS partners (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    owner_user_id    BIGINT NOT NULL,
    name             VARCHAR(255) NOT NULL,
    legal_name       VARCHAR(255),
    email            VARCHAR(255),
    phone            VARCHAR(64),
    address_line1    VARCHAR(255),
    address_line2    VARCHAR(255),
    city             VARCHAR(128),
    state            VARCHAR(128),
    country          VARCHAR(128),
    postal_code      VARCHAR(32),
    is_deleted       BOOLEAN NOT NULL DEFAULT FALSE,
    created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_partners_owner FOREIGN KEY (owner_user_id) REFERENCES users (id)
);
CREATE INDEX IF NOT EXISTS idx_partners_owner ON partners(owner_user_id);
CREATE INDEX IF NOT EXISTS idx_partners_name ON partners(name);

-- BRANDING (per partner)
CREATE TABLE IF NOT EXISTS branding (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    partner_id       BIGINT NOT NULL,
    logo_url         VARCHAR(1024),
    primary_color    VARCHAR(32),
    secondary_color  VARCHAR(32),
    notes            VARCHAR(1024),
    created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_branding_partner FOREIGN KEY (partner_id) REFERENCES partners (id)
);
CREATE INDEX IF NOT EXISTS idx_branding_partner ON branding(partner_id);

-- TAX SETTINGS (per partner)
CREATE TABLE IF NOT EXISTS tax_settings (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    partner_id       BIGINT NOT NULL,
    tax_id           VARCHAR(128),
    tax_rate         NUMERIC(5,2) DEFAULT 0.00, -- percentage
    tax_mode         VARCHAR(50) DEFAULT 'EXCLUSIVE', -- EXCLUSIVE, INCLUSIVE
    created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_tax_settings_partner FOREIGN KEY (partner_id) REFERENCES partners (id)
);
CREATE INDEX IF NOT EXISTS idx_tax_settings_partner ON tax_settings(partner_id);

-- CUSTOMERS (per partner)
CREATE TABLE IF NOT EXISTS customers (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    partner_id       BIGINT NOT NULL,
    name             VARCHAR(255) NOT NULL,
    email            VARCHAR(255),
    phone            VARCHAR(64),
    address_line1    VARCHAR(255),
    address_line2    VARCHAR(255),
    city             VARCHAR(128),
    state            VARCHAR(128),
    country          VARCHAR(128),
    postal_code      VARCHAR(32),
    is_deleted       BOOLEAN NOT NULL DEFAULT FALSE,
    created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_customers_partner FOREIGN KEY (partner_id) REFERENCES partners (id)
);
CREATE INDEX IF NOT EXISTS idx_customers_partner ON customers(partner_id);
CREATE INDEX IF NOT EXISTS idx_customers_name ON customers(name);

-- TEMPLATES (invoice templates)
CREATE TABLE IF NOT EXISTS templates (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    partner_id       BIGINT NOT NULL,
    name             VARCHAR(255) NOT NULL,
    template_type    VARCHAR(50) NOT NULL DEFAULT 'INVOICE', -- INVOICE, QUOTE, etc.
    content_json     TEXT, -- store serialized template structure/settings
    is_default       BOOLEAN NOT NULL DEFAULT FALSE,
    created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_templates_partner FOREIGN KEY (partner_id) REFERENCES partners (id)
);
CREATE INDEX IF NOT EXISTS idx_templates_partner ON templates(partner_id);

-- INVOICES
CREATE TABLE IF NOT EXISTS invoices (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    partner_id       BIGINT NOT NULL,
    customer_id      BIGINT NOT NULL,
    template_id      BIGINT,
    invoice_number   VARCHAR(100) NOT NULL,
    status           VARCHAR(50) NOT NULL DEFAULT 'DRAFT', -- DRAFT, SENT, PAID, OVERDUE, CANCELED
    currency         VARCHAR(10) NOT NULL DEFAULT 'USD',
    issue_date       DATE NOT NULL,
    due_date         DATE,
    subtotal_amount  NUMERIC(19,2) NOT NULL DEFAULT 0.00,
    tax_amount       NUMERIC(19,2) NOT NULL DEFAULT 0.00,
    discount_amount  NUMERIC(19,2) NOT NULL DEFAULT 0.00,
    total_amount     NUMERIC(19,2) NOT NULL DEFAULT 0.00,
    notes            TEXT,
    is_deleted       BOOLEAN NOT NULL DEFAULT FALSE,
    created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT uq_invoices_number UNIQUE (partner_id, invoice_number),
    CONSTRAINT fk_invoices_partner FOREIGN KEY (partner_id) REFERENCES partners (id),
    CONSTRAINT fk_invoices_customer FOREIGN KEY (customer_id) REFERENCES customers (id),
    CONSTRAINT fk_invoices_template FOREIGN KEY (template_id) REFERENCES templates (id)
);
CREATE INDEX IF NOT EXISTS idx_invoices_partner ON invoices(partner_id);
CREATE INDEX IF NOT EXISTS idx_invoices_customer ON invoices(customer_id);
CREATE INDEX IF NOT EXISTS idx_invoices_status ON invoices(status);
CREATE INDEX IF NOT EXISTS idx_invoices_due_date ON invoices(due_date);

-- INVOICE ITEMS
CREATE TABLE IF NOT EXISTS invoice_items (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    invoice_id       BIGINT NOT NULL,
    item_name        VARCHAR(255) NOT NULL,
    item_description TEXT,
    quantity         NUMERIC(19,4) NOT NULL DEFAULT 1.0000,
    unit_price       NUMERIC(19,4) NOT NULL DEFAULT 0.0000,
    line_total       NUMERIC(19,2) NOT NULL DEFAULT 0.00,
    created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_invoice_items_invoice FOREIGN KEY (invoice_id) REFERENCES invoices (id)
);
CREATE INDEX IF NOT EXISTS idx_invoice_items_invoice ON invoice_items(invoice_id);

-- PAYMENTS
CREATE TABLE IF NOT EXISTS payments (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    invoice_id       BIGINT NOT NULL,
    payment_date     DATE NOT NULL,
    method           VARCHAR(50), -- CARD, BANK_TRANSFER, CASH, etc.
    amount           NUMERIC(19,2) NOT NULL,
    status           VARCHAR(50) NOT NULL DEFAULT 'COMPLETED', -- PENDING, COMPLETED, FAILED, REFUNDED
    reference        VARCHAR(255),
    created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_payments_invoice FOREIGN KEY (invoice_id) REFERENCES invoices (id)
);
CREATE INDEX IF NOT EXISTS idx_payments_invoice ON payments(invoice_id);
CREATE INDEX IF NOT EXISTS idx_payments_status ON payments(status);

-- REMINDER SCHEDULES
CREATE TABLE IF NOT EXISTS reminder_schedules (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    partner_id       BIGINT NOT NULL,
    name             VARCHAR(255) NOT NULL,
    channel          VARCHAR(50) NOT NULL, -- EMAIL, SMS, WHATSAPP
    trigger_type     VARCHAR(50) NOT NULL, -- BEFORE_DUE, AFTER_DUE, CUSTOM
    trigger_days     INTEGER NOT NULL DEFAULT 0, -- +/- days relative to due date
    template_id      BIGINT, -- optional messaging template reference
    active           BOOLEAN NOT NULL DEFAULT TRUE,
    created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_reminder_schedules_partner FOREIGN KEY (partner_id) REFERENCES partners (id),
    CONSTRAINT fk_reminder_schedules_template FOREIGN KEY (template_id) REFERENCES templates (id)
);
CREATE INDEX IF NOT EXISTS idx_reminder_schedules_partner ON reminder_schedules(partner_id);
CREATE INDEX IF NOT EXISTS idx_reminder_schedules_active ON reminder_schedules(active);

-- REMINDER LOGS
CREATE TABLE IF NOT EXISTS reminder_logs (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    invoice_id       BIGINT NOT NULL,
    schedule_id      BIGINT,
    channel          VARCHAR(50) NOT NULL, -- EMAIL, SMS, WHATSAPP
    status           VARCHAR(50) NOT NULL, -- SENT, FAILED
    message_id       VARCHAR(255),
    error_message    VARCHAR(1024),
    sent_at          TIMESTAMP,
    created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_reminder_logs_invoice FOREIGN KEY (invoice_id) REFERENCES invoices (id),
    CONSTRAINT fk_reminder_logs_schedule FOREIGN KEY (schedule_id) REFERENCES reminder_schedules (id)
);
CREATE INDEX IF NOT EXISTS idx_reminder_logs_invoice ON reminder_logs(invoice_id);
CREATE INDEX IF NOT EXISTS idx_reminder_logs_status ON reminder_logs(status);

-- WEBHOOK SUBSCRIPTIONS
CREATE TABLE IF NOT EXISTS webhook_subscriptions (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    partner_id       BIGINT NOT NULL,
    event_type       VARCHAR(100) NOT NULL, -- e.g., INVOICE_CREATED, PAYMENT_RECEIVED
    target_url       VARCHAR(1024) NOT NULL,
    secret_token     VARCHAR(255),
    active           BOOLEAN NOT NULL DEFAULT TRUE,
    created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_webhook_subscriptions_partner FOREIGN KEY (partner_id) REFERENCES partners (id)
);
CREATE INDEX IF NOT EXISTS idx_webhook_subscriptions_partner ON webhook_subscriptions(partner_id);
CREATE INDEX IF NOT EXISTS idx_webhook_subscriptions_active ON webhook_subscriptions(active);

-- FILE ATTACHMENTS (e.g., PDFs)
CREATE TABLE IF NOT EXISTS file_attachments (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    invoice_id       BIGINT,
    partner_id       BIGINT NOT NULL,
    file_name        VARCHAR(255) NOT NULL,
    file_url         VARCHAR(1024) NOT NULL,
    mime_type        VARCHAR(128),
    size_bytes       BIGINT,
    created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_file_attachments_invoice FOREIGN KEY (invoice_id) REFERENCES invoices (id),
    CONSTRAINT fk_file_attachments_partner FOREIGN KEY (partner_id) REFERENCES partners (id)
);
CREATE INDEX IF NOT EXISTS idx_file_attachments_invoice ON file_attachments(invoice_id);
CREATE INDEX IF NOT EXISTS idx_file_attachments_partner ON file_attachments(partner_id);

-- Helpful triggers for updated_at (Postgres would use triggers; H2 does not support easily).
-- We will rely on application layer to update updated_at where needed.
